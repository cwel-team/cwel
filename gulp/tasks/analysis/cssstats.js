const cssstats              = require('cssstats');                      // Get stats for your rendered CSS
const del                   = require('del');                           // Delete files and folders
const fs                    = require('fs');                            // Core NodeJS module
const gulp                  = require('gulp');                          // Task automator
const path                  = require('path');                          // core NodeJS module

const generateCssStats      = require('../../lib/docs/cssstats/generateCssStats');


// @internal
gulp.task('cwel-analysis-generate-css-stats-data', () => {
    const css = fs.readFileSync('Cwel.Docs.Web/Cwel/cwel.css', 'utf8');
    const datum = cssstats(css);
    let dataExploded = {};
    const cssstatsDir = path.join('Cwel', '.tmp', 'docs', 'cssstats');
    dataExploded.data = datum;

    // CSS Stats methods: https://github.com/cssstats/core#returned-object
    dataExploded.specificityGraph = datum.selectors.getSpecificityGraph();
    dataExploded.specificityValues = datum.selectors.getSpecificityValues();
    dataExploded.repeatedValues = datum.selectors.getRepeatedValues();
    dataExploded.sortedSpecificity = datum.selectors.getSortedSpecificity();
    dataExploded.uniquePropertyCount = datum.declarations.getUniquePropertyCount('color');
    dataExploded.getPropertyValueCountDisplayNone = datum.declarations.getPropertyValueCount('display', 'none');
    dataExploded = generateCssStats(dataExploded);

    if (!fs.existsSync(cssstatsDir)) {
        fs.mkdirSync(cssstatsDir); // `fs.writeFileSync` will fail if directory doesn't exist
    }
    fs.writeFileSync(path.join('Cwel', '.tmp', 'docs', 'cssstats', 'cssstats.json'), dataExploded, 'utf-8'); // This file get used by `cwel-analysis-css-stats` and `cwel-docs-generate-css-stats`
});
// @internal
gulp.task('clean:cwel-analysis-generate-css-stats-data', () => del(['Cwel/.tmp/docs/cssstats/']));


// @internal
gulp.task('cwel-analysis-css-stats', () => {
    // Task 0: Grab the file generated by `cwel-analysis-generate-css-stats-data` task
    const cssstatsJson = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'Cwel', '.tmp', 'docs', 'cssstats', 'cssstats.json'), 'utf-8'));

    // Task 1: Break the build if total size of CSS is over budget
    const sizeBudget = parseInt('250', 10); // Size in kB
    const actualSize = parseInt(cssstatsJson.stats.data.humanizedSize, 10);
    if (actualSize > sizeBudget) {
        const err = `CSS Stats - size budget exceeded. Size budget: ${sizeBudget}kB. Actual size: ${actualSize}kB.`;
        throw Error(err); // Variable above used as Node bug doesn't allow back-tick style strings
    }

    // Task 2: Break the build if X percent of rules surpass Y specificity threshold
    const specificity = cssstatsJson.stats.specificityGraph;
    const specificityThreshold = 20; // Base 10 specificity score - see http://csswizardry.com/2014/10/the-specificity-graph/
    const specificityThresholdPercentage = 5; // Percent of items allowed over the threshold
    const specificityLength = cssstatsJson.stats.specificityGraph.length;
    let itemsOverThreshold = 0;
    specificity.forEach((item) => {
        if (item >= specificityThreshold) {
            itemsOverThreshold += 1;
        }
    });
    if (itemsOverThreshold > ((specificityLength / 100) * specificityThresholdPercentage)) {
        const err = `CSS Stats - specificity threshold budget exceeded. Specificity threshold: ${specificityThreshold}. Items over threshold: ${itemsOverThreshold} (greater than ${specificityThresholdPercentage}% of total number of selectors.`;
        throw Error(err); // Variable above used as Node bug doesn't allow back-tick style strings
    }
});
