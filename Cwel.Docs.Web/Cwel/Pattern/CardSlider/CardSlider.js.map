{"version":3,"sources":["CardSlider/CardSlider.es"],"names":["angular","module","directive","CwoMI","CwomponentFactory","Breakpoint","deviceTranslateIndex","perSlide","index","restrict","scope","startIndex","transitionDuration","count","link","el","previousSwipe","Date","now","deltaTime","parseInt","cardsPerSlide","currentDevice","name","hammertime","Hammer","on","$apply","next","previous","$watch","newValue","maxIndex","currentIndex","responsiveAdjustIndex","Math","max","logEvent","event","min"],"mappings":"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","file":"CardSlider.js","sourcesContent":["/**\r\n* @name CardSlider\r\n* @type pattern\r\n* @angulartype directive\r\n* @module cwoApp\r\n* @dependencies CwoMI, CwomponentFactory\r\n*/\r\n/* global Hammer */\r\nangular.module('cwoApp')\r\n.directive('cwelCardSlider', (CwoMI, CwomponentFactory, Breakpoint) => {\r\n    function deviceTranslateIndex(perSlide, index) {\r\n        return (((index - (index % perSlide))\r\n                + perSlide) / perSlide) - 1;\r\n    }\r\n\r\n    return CwomponentFactory({\r\n        restrict: 'A',\r\n        scope: {\r\n            startIndex: '@',\r\n            transitionDuration: '@',\r\n            count: '@',\r\n        },\r\n        link(scope, el) {\r\n            scope.previousSwipe = Date.now();\r\n            scope.deltaTime = () => Date.now() - scope.previousSwipe;\r\n            scope.count = parseInt(scope.count, 10);\r\n            scope.cardsPerSlide = Breakpoint.currentDevice.name === 'm'\r\n            || Breakpoint.currentDevice.name === 'l'\r\n            || Breakpoint.currentDevice.name === 'xl'\r\n                ? 3\r\n                : 1;\r\n\r\n            const hammertime = new Hammer(el[0]);\r\n\r\n            hammertime.on('swipeleft', () => {\r\n                scope.$apply(() => {\r\n                    scope.next();\r\n                });\r\n            });\r\n\r\n            hammertime.on('swiperight', () => {\r\n                scope.$apply(() => {\r\n                    scope.previous();\r\n                });\r\n            });\r\n\r\n            scope.$watch('currentIndex', (newValue) => {\r\n                if (newValue > scope.maxIndex()) {\r\n                    scope.currentIndex = scope.maxIndex();\r\n                }\r\n                if (newValue < 0) {\r\n                    scope.currentIndex = 0;\r\n                }\r\n            });\r\n\r\n            Breakpoint\r\n            .on(['xs', 's'], () => {\r\n                scope.$apply(() => {\r\n                    scope.cardsPerSlide = 1;\r\n                    scope.responsiveAdjustIndex();\r\n                });\r\n            })\r\n            .on(['m', 'l', 'xl'], () => {\r\n                scope.$apply(() => {\r\n                    scope.cardsPerSlide = 3;\r\n                    scope.responsiveAdjustIndex();\r\n                });\r\n            });\r\n\r\n            scope.responsiveAdjustIndex = () => {\r\n                if (scope.currentIndex > scope.maxIndex()) {\r\n                    scope.currentIndex = scope.maxIndex();\r\n                }\r\n                if (scope.currentIndex < 0) {\r\n                    scope.currentIndex = 0;\r\n                }\r\n            };\r\n\r\n            scope.maxIndex = () => deviceTranslateIndex(scope.cardsPerSlide, scope.count - 1);\r\n\r\n            /**\r\n            * Index of active slide\r\n            * @scope\r\n            * @name currentIndex\r\n            * @type int\r\n            */\r\n            scope.currentIndex = parseInt(scope.startIndex, 10);\r\n\r\n            /**\r\n            * Move to the previous slide.\r\n            * @scope\r\n            * @name previous\r\n            * @param {string} str Cool string with a name.\r\n            * @return {void}\r\n            */\r\n            scope.previous = () => {\r\n                scope.previousSwipe = Date.now();\r\n                scope.currentIndex = Math.max(0, scope.currentIndex - 1);\r\n                CwoMI.logEvent({ event: `CardSlider-Previous-${scope.currentIndex}` });\r\n            };\r\n\r\n            /**\r\n            * Move to the next slide.\r\n            * @scope\r\n            * @name next\r\n            * @return {void}\r\n            */\r\n            scope.next = () => {\r\n                scope.previousSwipe = Date.now();\r\n                scope.currentIndex = Math.min(scope.count - 1, scope.currentIndex + 1);\r\n                CwoMI.logEvent({ event: `CardSlider-Next-${scope.currentIndex}` });\r\n            };\r\n        },\r\n    });\r\n});\r\n"]}