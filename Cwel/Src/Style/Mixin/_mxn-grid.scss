////
/// @group Mixins
/// @since 0.0.1
////

///

@mixin grid($grid-settings: $GRID) {
    $gutter-xs: map-get($grid-settings, 'gutter-xs');

    display: flex;
    flex-grow: 0;
    flex-shrink: 0;
    flex-direction: row;
    flex-wrap: wrap;
    margin-left: $gutter-xs * -1;

    @each $key in map-keys($BREAKPOINTS) {
        $breakpoint: map-get($BREAKPOINTS, $key);
        $gutter: map-get($grid-settings, 'gutter-#{$key}');

        @media(min-width: $breakpoint) {
            margin-left: $gutter * -1;
        }
    }
}

/// @group Functions

@function grid-cell-size($n) {
    @return ($n / 12) * 100%;
}

///

@mixin grid-cell-gutter($device) {
    $gutter: map-get($GRID, 'gutter-#{$device}');
    padding-left: $gutter;
}

///

@mixin grid-cell-width($width) {
    flex-basis: grid-cell-size($width);
    max-width: grid-cell-size($width);
}

///

@mixin grid-cell-box-model {
    flex-grow: 0;
    flex-shrink: 0;
}

///

@mixin grid-cell($sizing, $grid-settings: $GRID) {
    $gutter-xs: map-get($grid-settings, 'gutter-xs');
    $width-xs: map-get($sizing, 'xs') or 12;

    @include grid-cell-box-model;
    @include grid-cell-width($width-xs);
    @include grid-cell-gutter('xs');

    @each $key in map-keys($BREAKPOINTS) {
        $breakpoint: map-get($BREAKPOINTS, $key);
        $width: map-get($sizing, $key);

        @media(min-width: $breakpoint) {
            @if ($width != null) {
                @include grid-cell-width($width);
            }
            @include grid-cell-gutter($key);
        }
    }
}

/*************************************
 * Grid Utilities
 ************************************/

///

@mixin grid-align($alignment: 'left') {
    $horizontal: (
        left: flex-start,
        center: center,
        right: flex-end,
    );
    $vertical: (
        top: flex-start,
        middle: center,
        bottom: flex-end
    );

    @if $alignment in $horizontal  {
        justify-content: map-get($horizontal, $alignment);
    }

    @if $alignment in $vertical {
        align-items: map-get($vertical, $alignment);
    }
}

///

@mixin grid-reverse {
    flex-direction: row-reverse;
}

/// `!important` used to trump all media queries

@mixin grid-flush {
    margin-left: 0 !important; // stylelint-disable-line declaration-no-important
}

///

@mixin grid-justify-space-between {
    justify-content: space-between;
}

///

@mixin grid-justify-space-around {
    justify-content: space-around;
}

/*************************************
 * Grid Cell Utilities
 ************************************/

///

@mixin grid-cell-align($alignment: 'top') {
    $vertical: (
        top: flex-start,
        middle: center,
        bottom: flex-end
    );

    @if $alignment in $vertical {
        align-self: map-get($vertical, $alignment);
    }
}

/// `!important` used to trump all media queries

@mixin grid-cell-flush {
    padding-left: 0 !important; // stylelint-disable-line declaration-no-important
}

///

@mixin grid-cell-fit {
    flex-grow: 1;
    max-width: none;
}

/*************************************
 * Grid Classes
 ************************************/

///

@mixin generate-grid-classes {

    .grid {
        @include grid();
    }
    .grid--align-left {
        @include grid-align('left');
    }
    .grid--align-center {
        @include grid-align('center');
    }
    .grid--align-right {
        @include grid-align('right');
    }
    .grid--align-top {
        @include grid-align('top');
    }
    .grid--align-middle {
        @include grid-align('middle');
    }
    .grid--align-bottom {
        @include grid-align('bottom');
    }
    .grid--reverse {
        @include grid-reverse;
    }
    .grid--flush {
        @include grid-flush;

        .grid__cell {
            @include grid-cell-flush;
        }
    }
    .grid--justify-space-around {
        @include grid-justify-space-around;
    }
    .grid--justify-space-between {
        @include grid-justify-space-between;
    }

    .grid__cell {
        @include grid-cell-box-model;
        @include grid-cell-gutter('xs');
        @include grid-cell-width(12);

        @each $key in map-keys($BREAKPOINTS) {
            $breakpoint: map-get($BREAKPOINTS, $key);

            @media(min-width: $breakpoint) {
                @include grid-cell-gutter($key);
            }
        }
    }

    .grid__cell--align-top {
        @include grid-cell-align('top');
    }

    .grid__cell--align-middle {
        @include grid-cell-align('middle');
    }

    .grid__cell--align-bottom {
        @include grid-cell-align('bottom');
    }

    @for $i from 1 through 12 {
        .grid__cell--size-#{$i} {
            @include grid-cell-width($i);
        }
    }

    @for $i from 1 through 12 {
        @each $key in map-keys($BREAKPOINTS) {
            $breakpoint: map-get($BREAKPOINTS, $key);

            .grid__cell--size-#{$i}-#{$key} {
                @media(min-width: $breakpoint) {
                    @include grid-cell-width($i);
                }
            }
        }
    }
}
